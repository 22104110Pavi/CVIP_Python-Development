import tkinter as tk
from tkinter import ttk
import sounddevice as sd
import wave
import threading

class VoiceRecorder:
    def __init__(self, master):
        self.master = master
        self.master.title("Voice Recorder")
        self.master.geometry("400x200")

        self.record_button = ttk.Button(self.master, text="Record", command=self.toggle_recording)
        self.record_button.pack(pady=20)

        self.recording = False
        self.frames = []

    def toggle_recording(self):
        if not self.recording:
            self.recording = True
            self.record_button.config(text="Stop Recording")
            self.start_recording()
        else:
            self.recording = False
            self.record_button.config(text="Record")
            self.stop_recording()

    def start_recording(self):
        self.frames = []  # Clear previous frames
        t = threading.Thread(target=self.record_audio)
        t.start()

    def stop_recording(self):
        t = threading.Thread(target=self.save_audio)
        t.start()

    def record_audio(self):
        fs = 44100  # Sample rate
        duration = 10  # Recording duration in seconds

        try:
            with sd.InputStream(channels=2, samplerate=fs, callback=self.callback):
                sd.sleep(int(duration * 1000))
        except Exception as e:
            print(f"Error recording audio: {e}")

    def callback(self, indata, frames, time, status):
        if status:
            print(f"Error in audio stream: {status}")
        self.frames.append(indata.copy())

    def save_audio(self):
        filename = "recorded_audio.wav"
        wf = wave.open(filename, 'wb')
        wf.setnchannels(2)
        wf.setsampwidth(2)
        wf.setframerate(44100)
        wf.writeframes(b''.join(self.frames))
        wf.close()
        print(f"Audio saved as {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceRecorder(root)
    root.mainloop()
